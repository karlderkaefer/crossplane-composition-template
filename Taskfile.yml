version: 3
dotenv:
  - .env
env:
  PACKAGE_NAME: configuration-demo
  CROSSPLANE_CHART_VERSION: v1.16.0-up.1
  UP_DEFAULT_REPO: xpkg.upbound.io
  DOCKER_TAG:
    sh: yq e '.metadata.labels."crossplane.io/xrd-version-patch"' {{ .COMPOSITION_PATH }}
vars:
  COMPOSITION_PATH: composition/apis/composition.yaml
tasks:
  # Configuration Package Management
  login:
    desc: Login to Upbound Marketplace
    silent: true
    cmds:
      - echo "$UP_PASSWORD" | crossplane xpkg login -u $UP_USER -a $UP_ACCOUNT
  build:
    desc: Build the configuration image
    cmds:
      - |
        crossplane xpkg build --package-root=composition --package-file=$PACKAGE_NAME.xpkg -e composition/examples
  push:
    deps:
      - build
      - login
    silent: true
    cmds: 
      - |
        crossplane xpkg push -f $PACKAGE_NAME.xpkg $UP_ACCOUNT/$PACKAGE_NAME:$DOCKER_TAG
        echo "pushed $UP_ACCOUNT/$PACKAGE_NAME:$DOCKER_TAG"
  
  # Kind Cluster Management
  setup:
    desc: Setup local kind cluster
    cmds:
      - task: install-kind-latest
      - task: create-cluster
      - task: install-crossplane
      - task: install-example
  install-kind-latest:
    cmds:
      - |
        LATEST_TAG=$(curl --silent "https://api.github.com/repos/kubernetes-sigs/kind/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${LATEST_TAG}/kind-$(uname -s)-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
    status:
    - command -v kind
  create-cluster:
    cmds:
      - kind create cluster --wait 1m
    status:
      - ! kind get kubeconfig
  is-kind-env:
    silent: true
    cmds:
      - |
        context=$(kubectl config current-context)
        if [[ "${context}" != "kind-kind" ]]; then
          echo "This task requires a kind cluster to be running. But the current context is ${context}"
          exit 1
        fi
  install-crossplane:
    silent: true
    deps:
      - is-kind-env
    cmds:
      - |
        printf "Installing the UXP Helm chart (this will take a few minutes)...\n"
        helm repo add upbound-stable https://charts.upbound.io/stable
        helm repo update upbound-stable
        helm upgrade --install crossplane upbound-stable/universal-crossplane --devel --namespace crossplane-system --create-namespace --version $CROSSPLANE_CHART_VERSION --wait --set args[0]="--debug" --set args[1]="--enable-environment-configs"
        kubectl -n crossplane-system wait deployment crossplane --for=condition=Available --timeout=180s
    status:
      - helm get values -n crossplane-system crossplane
  install-secrets:
    silent: true
    deps:
      - is-kind-env
    cmds:
      - |
        kubectl delete secret upbound-pull-secret -n crossplane-system || true
        kubectl create secret docker-registry upbound-pull-secret --docker-server=$UP_DEFAULT_REPO --docker-username=_token --docker-password=$UP_PASSWORD -n crossplane-system
  install-example:
    deps:
      - is-kind-env
    cmds:
      - |
        kubectl apply -f composition/examples/provider.yaml
        kubectl wait provider.pkg crossplane-contrib-provider-kubernetes --for=condition=Healthy --timeout=40s
        kubectl apply -f composition/examples/providerconfig.yaml
        kubectl apply -f composition/examples/package.yaml
        kubectl wait configuration.pkg configuration-demo --for=condition=Healthy --timeout=30s
        kubectl apply -f composition/examples/claim.yaml
  teardown:
    desc: Teardown the configuration example
    cmds:
      - |
        kubectl delete -f composition/examples/claim.yaml --wait=true || true
        kubectl delete -f composition/examples/providerconfig.yaml || true
        kubectl delete -f composition/examples/package.yaml || true

  # Release Management
  generate-version:
    desc: |
      Generate the version of the configuration package as floating version labels
    silent: true
    vars:
      EXAMPLE: "composition/examples/package.yaml"
    cmds:
      - |
        version=$(yq e '.metadata.labels."crossplane.io/xrd-version-patch"' {{ .COMPOSITION_PATH }} | cut -c 2-)
        semver_regex="^[0-9]+\.[0-9]+\.[0-9]+$"
        if [[ ! $version =~ $semver_regex ]]; then
          echo "Invalid semver version: $version for file {{ .COMPOSITION_PATH }}"
          exit 1
        fi
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f1-2)
        echo "bumping file {{ .COMPOSITION_PATH }} to version $version and minor $minor and major $major"
        yq eval -i -I 1 '.metadata.labels."crossplane.io/xrd-version-major" = "v'$major'"' {{ .COMPOSITION_PATH }}
        yq eval -i -I 1 '.metadata.labels."crossplane.io/xrd-version-minor" = "v'$minor'"' {{ .COMPOSITION_PATH }}
        new_package_value="$UP_DEFAULT_REPO/$UP_ACCOUNT/$PACKAGE_NAME:v$version"
        echo "bumping file {{ .EXAMPLE }} to package $new_package_value"
        yq eval '.spec.package = "'"$new_package_value"'"' -i composition/examples/package.yaml

  snapshot:
    desc: Snapshot the current state of the composition
    silent: true
    cmds:
      - crossplane beta render composition/examples/claim.yaml composition/apis/composition.yaml function.yaml > test/snapshots/main.yaml
      - git --no-pager diff test/snapshots/main.yaml
  kyverno-check:
    silent: true
    cmds:
      - kyverno apply test/policies $(find composition -type f -name "definition.yaml" -exec sh -c 'find $(dirname {}) -name "*.yaml"' \; | awk '{print "--resource " $1}' | tr '\n' ' ') -v 3